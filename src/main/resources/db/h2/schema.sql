DROP TABLE notification_schedules IF EXISTS;
DROP TABLE notifications IF EXISTS;
DROP TABLE vet_specialties IF EXISTS;
DROP TABLE vets IF EXISTS;
DROP TABLE specialties IF EXISTS;
DROP TABLE visits IF EXISTS;
DROP TABLE pets IF EXISTS;
DROP TABLE types IF EXISTS;
DROP TABLE owners IF EXISTS;


CREATE TABLE vets (
  id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name VARCHAR(30),
  last_name  VARCHAR(30)
);
CREATE INDEX vets_last_name ON vets (last_name);

CREATE TABLE specialties (
  id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(80)
);
CREATE INDEX specialties_name ON specialties (name);

CREATE TABLE vet_specialties (
  vet_id       INTEGER NOT NULL,
  specialty_id INTEGER NOT NULL
);
ALTER TABLE vet_specialties ADD CONSTRAINT fk_vet_specialties_vets FOREIGN KEY (vet_id) REFERENCES vets (id);
ALTER TABLE vet_specialties ADD CONSTRAINT fk_vet_specialties_specialties FOREIGN KEY (specialty_id) REFERENCES specialties (id);

CREATE TABLE types (
  id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(80)
);
CREATE INDEX types_name ON types (name);

CREATE TABLE owners (
  id                     INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name             VARCHAR(30),
  last_name              VARCHAR_IGNORECASE(30),
  address                VARCHAR(255),
  city                   VARCHAR(80),
  telephone              VARCHAR(20),
  email                  VARCHAR(255),
  notification_preference VARCHAR(10)
);
CREATE INDEX owners_last_name ON owners (last_name);

CREATE TABLE pets (
  id         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name       VARCHAR(30),
  birth_date DATE,
  type_id    INTEGER NOT NULL,
  owner_id   INTEGER
);
ALTER TABLE pets ADD CONSTRAINT fk_pets_owners FOREIGN KEY (owner_id) REFERENCES owners (id);
ALTER TABLE pets ADD CONSTRAINT fk_pets_types FOREIGN KEY (type_id) REFERENCES types (id);
CREATE INDEX pets_name ON pets (name);

CREATE TABLE visits (
  id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  pet_id      INTEGER,
  visit_date  DATE,
  description VARCHAR(255)
);
ALTER TABLE visits ADD CONSTRAINT fk_visits_pets FOREIGN KEY (pet_id) REFERENCES pets (id);
CREATE INDEX visits_pet_id ON visits (pet_id);

CREATE TABLE notifications (
  id             INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  message        VARCHAR(255) NOT NULL,
  type           VARCHAR(30) NOT NULL,
  status         VARCHAR(30) NOT NULL,
  scheduled_time TIMESTAMP NOT NULL,
  sent_time      TIMESTAMP,
  owner_id       INTEGER NOT NULL,
  pet_id         INTEGER
);
ALTER TABLE notifications ADD CONSTRAINT fk_notifications_owners FOREIGN KEY (owner_id) REFERENCES owners (id);
ALTER TABLE notifications ADD CONSTRAINT fk_notifications_pets FOREIGN KEY (pet_id) REFERENCES pets (id);
CREATE INDEX notifications_owner_id ON notifications (owner_id);
CREATE INDEX notifications_pet_id ON notifications (pet_id);
CREATE INDEX notifications_status ON notifications (status);

CREATE TABLE notification_schedules (
  id               INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  message_template VARCHAR(255) NOT NULL,
  type             VARCHAR(30) NOT NULL,
  scheduled_time   TIMESTAMP NOT NULL,
  days_before      INTEGER,
  enabled          BOOLEAN DEFAULT TRUE,
  owner_id         INTEGER NOT NULL,
  pet_id           INTEGER,
  visit_id         INTEGER
);
ALTER TABLE notification_schedules ADD CONSTRAINT fk_notification_schedules_owners FOREIGN KEY (owner_id) REFERENCES owners (id);
ALTER TABLE notification_schedules ADD CONSTRAINT fk_notification_schedules_pets FOREIGN KEY (pet_id) REFERENCES pets (id);
ALTER TABLE notification_schedules ADD CONSTRAINT fk_notification_schedules_visits FOREIGN KEY (visit_id) REFERENCES visits (id);
CREATE INDEX notification_schedules_owner_id ON notification_schedules (owner_id);
CREATE INDEX notification_schedules_pet_id ON notification_schedules (pet_id);
CREATE INDEX notification_schedules_visit_id ON notification_schedules (visit_id);
